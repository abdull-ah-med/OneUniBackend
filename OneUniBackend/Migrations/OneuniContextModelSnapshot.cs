// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OneUniBackend.Models;

#nullable disable

namespace OneUniBackend.Migrations
{
    [DbContext(typeof(OneuniContext))]
    partial class OneuniContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "application_status", new[] { "draft", "scheduled", "submitted", "under_review", "await_merit_list", "awaiting_fee_submission", "accepted", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "document_type", new[] { "matric_certificate", "intermediate_certificate", "transcript", "cnic", "passport", "nicop", "b_form", "sports_certificate", "hafiz_certificate", "income_certificate", "domicile", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "education_type", new[] { "matric", "intermediate", "a_levels", "o_levels", "equivalent" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender_type", new[] { "male", "female", "other", "prefer_not_to_say" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "guardian_relation", new[] { "father", "mother", "guardian", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "id_document_type", new[] { "cnic", "nicop", "passport", "b_form" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "session_status", new[] { "scheduled", "completed", "cancelled", "no_show" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "session_type", new[] { "free", "paid" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "test_type", new[] { "NET", "ECAT", "MDCAT", "SAT", "IELTS", "TOEFL", "FAST", "LUMS", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "student", "mentor", "university_representative", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "verification_status", new[] { "pending", "verified", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OneUniBackend.Models.AdmissionCycle", b =>
                {
                    b.Property<Guid>("CycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("academic_year");

                    b.Property<DateOnly?>("ApplicationEndDate")
                        .HasColumnType("date")
                        .HasColumnName("application_end_date");

                    b.Property<DateOnly?>("ApplicationStartDate")
                        .HasColumnType("date")
                        .HasColumnName("application_start_date");

                    b.Property<DateOnly?>("ClassesStartDate")
                        .HasColumnType("date")
                        .HasColumnName("classes_start_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("FeeSubmissionDeadline")
                        .HasColumnType("date")
                        .HasColumnName("fee_submission_deadline");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateOnly?>("MeritListDate")
                        .HasColumnType("date")
                        .HasColumnName("merit_list_date");

                    b.Property<string>("SessionName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("session_name");

                    b.Property<DateOnly?>("TestDate")
                        .HasColumnType("date")
                        .HasColumnName("test_date");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CycleId")
                        .HasName("admission_cycles_pkey");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_admission_cycles_university_id");

                    b.ToTable("admission_cycles", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("application_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool?>("AdmissionOffered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("admission_offered");

                    b.Property<string>("ApplicationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("application_number");

                    b.Property<bool?>("AutoSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("auto_submitted");

                    b.Property<decimal?>("CalculatedMerit")
                        .HasPrecision(8, 4)
                        .HasColumnType("numeric(8,4)")
                        .HasColumnName("calculated_merit");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("cycle_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FeeChallanNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fee_challan_number");

                    b.Property<decimal?>("FeePaidAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("fee_paid_amount");

                    b.Property<DateOnly?>("FeePaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("fee_payment_date");

                    b.Property<bool?>("HostelRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("hostel_required");

                    b.Property<int?>("MeritPosition")
                        .HasColumnType("integer")
                        .HasColumnName("merit_position");

                    b.Property<DateOnly?>("OfferDate")
                        .HasColumnType("date")
                        .HasColumnName("offer_date");

                    b.Property<DateOnly?>("OfferExpiresAt")
                        .HasColumnType("date")
                        .HasColumnName("offer_expires_at");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uuid")
                        .HasColumnName("program_id");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<DateOnly?>("ScheduledSubmissionDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduled_submission_date");

                    b.Property<bool?>("ScholarshipApplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("scholarship_applied");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submission_date");

                    b.Property<bool?>("TransportRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("transport_required");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ApplicationId")
                        .HasName("applications_pkey");

                    b.HasIndex("CycleId")
                        .HasDatabaseName("ix_applications_cycle_id");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("ix_applications_program_id");

                    b.HasIndex(new[] { "UniversityId", "ProgramId" }, "idx_applications_university_program")
                        .HasDatabaseName("ix_applications_university_id_program_id");

                    b.HasIndex(new[] { "UserId" }, "idx_applications_user_id")
                        .HasDatabaseName("ix_applications_user_id");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.AuditLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("log_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<IPAddress>("IpAddress")
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<Guid?>("RecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("record_id");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("table_name");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LogId")
                        .HasName("audit_logs_pkey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_audit_logs_user_id");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("department_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("HeadOfDepartment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("head_of_department");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ShortName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("short_name");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DepartmentId")
                        .HasName("departments_pkey");

                    b.HasIndex(new[] { "UniversityId" }, "idx_departments_university_id")
                        .HasDatabaseName("ix_departments_university_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("document_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_name");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("document_type");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<int?>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<bool?>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("verification_status");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("verified_at");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_by");

                    b.HasKey("DocumentId")
                        .HasName("documents_pkey");

                    b.HasIndex("VerifiedBy")
                        .HasDatabaseName("ix_documents_verified_by");

                    b.HasIndex(new[] { "ApplicationId" }, "idx_documents_application_id")
                        .HasDatabaseName("ix_documents_application_id");

                    b.HasIndex(new[] { "UserId" }, "idx_documents_user_id")
                        .HasDatabaseName("ix_documents_user_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.EducationalRecord", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("record_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BoardUniversity")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("board_university");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EducationType")
                        .HasColumnType("integer")
                        .HasColumnName("education_type");

                    b.Property<string>("Grade")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("grade");

                    b.Property<string>("InstitutionName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("institution_name");

                    b.Property<bool?>("IsResultAwaited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_result_awaited");

                    b.Property<int?>("ObtainedMarks")
                        .HasColumnType("integer")
                        .HasColumnName("obtained_marks");

                    b.Property<decimal?>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("percentage");

                    b.Property<string>("RollNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("roll_number");

                    b.Property<int?>("TotalMarks")
                        .HasColumnType("integer")
                        .HasColumnName("total_marks");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int?>("YearOfCompletion")
                        .HasColumnType("integer")
                        .HasColumnName("year_of_completion");

                    b.HasKey("RecordId")
                        .HasName("educational_records_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_educational_records_user_id")
                        .HasDatabaseName("ix_educational_records_user_id");

                    b.ToTable("educational_records", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Mentor", b =>
                {
                    b.Property<Guid>("MentorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("mentor_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AvailabilityHours")
                        .HasColumnType("jsonb")
                        .HasColumnName("availability_hours");

                    b.Property<decimal?>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("average_rating")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrentInstitution")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("current_institution");

                    b.Property<string>("Designation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("designation");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("integer")
                        .HasColumnName("experience_years");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("field_of_study");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("integer")
                        .HasColumnName("graduation_year");

                    b.Property<decimal?>("HourlyRate")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("hourly_rate");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_picture_url");

                    b.PrimitiveCollection<List<string>>("Specializations")
                        .HasColumnType("text[]")
                        .HasColumnName("specializations");

                    b.Property<int?>("TotalSessions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_sessions");

                    b.Property<string>("UniversityEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("university_email");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("MentorId")
                        .HasName("mentors_pkey");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_mentors_university_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_mentors_user_id");

                    b.ToTable("mentors", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.MentorshipSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_end_time");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_start_time");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(60)
                        .HasColumnName("duration_minutes");

                    b.Property<decimal?>("FeeAmount")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("fee_amount");

                    b.Property<string>("MentorFeedback")
                        .HasColumnType("text")
                        .HasColumnName("mentor_feedback");

                    b.Property<Guid?>("MentorId")
                        .HasColumnType("uuid")
                        .HasColumnName("mentor_id");

                    b.Property<int?>("MentorRating")
                        .HasColumnType("integer")
                        .HasColumnName("mentor_rating");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payment_reference");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<string>("SessionNotes")
                        .HasColumnType("text")
                        .HasColumnName("session_notes");

                    b.Property<int>("SessionStatus")
                        .HasColumnType("integer")
                        .HasColumnName("session_status");

                    b.Property<int>("SessionType")
                        .HasColumnType("integer")
                        .HasColumnName("session_type");

                    b.Property<string>("StudentFeedback")
                        .HasColumnType("text")
                        .HasColumnName("student_feedback");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<int?>("StudentRating")
                        .HasColumnType("integer")
                        .HasColumnName("student_rating");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("topic");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("SessionId")
                        .HasName("mentorship_sessions_pkey");

                    b.HasIndex(new[] { "MentorId" }, "idx_mentorship_sessions_mentor_id")
                        .HasDatabaseName("ix_mentorship_sessions_mentor_id");

                    b.HasIndex(new[] { "StudentId" }, "idx_mentorship_sessions_student_id")
                        .HasDatabaseName("ix_mentorship_sessions_student_id");

                    b.ToTable("mentorship_sessions", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.MeritFormula", b =>
                {
                    b.Property<Guid>("FormulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("formula_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AcademicYear")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("academic_year");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("IntermediateWeightage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("intermediate_weightage");

                    b.Property<decimal?>("InterviewWeightage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("interview_weightage")
                        .HasDefaultValueSql("0");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal?>("MatricWeightage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("matric_weightage");

                    b.Property<decimal?>("MinimumIntermediatePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("minimum_intermediate_percentage");

                    b.Property<decimal?>("MinimumMatricPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("minimum_matric_percentage");

                    b.Property<decimal?>("MinimumTestScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("minimum_test_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uuid")
                        .HasColumnName("program_id");

                    b.Property<decimal?>("TestWeightage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("test_weightage");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FormulaId")
                        .HasName("merit_formulas_pkey");

                    b.HasIndex("ProgramId")
                        .HasDatabaseName("ix_merit_formulas_program_id");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_merit_formulas_university_id");

                    b.ToTable("merit_formulas", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("read_at");

                    b.Property<Guid?>("RelatedApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_application_id");

                    b.Property<Guid?>("RelatedSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_session_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("notifications_pkey");

                    b.HasIndex("RelatedApplicationId")
                        .HasDatabaseName("ix_notifications_related_application_id");

                    b.HasIndex("RelatedSessionId")
                        .HasDatabaseName("ix_notifications_related_session_id");

                    b.HasIndex(new[] { "UserId" }, "idx_notifications_user_id")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Program", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("program_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DegreeType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("degree_type")
                        .HasDefaultValueSql("'BS'::character varying");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DurationYears")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(4)
                        .HasColumnName("duration_years");

                    b.Property<string>("EligibilityCriteria")
                        .HasColumnType("text")
                        .HasColumnName("eligibility_criteria");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("TotalCreditHours")
                        .HasColumnType("integer")
                        .HasColumnName("total_credit_hours");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProgramId")
                        .HasName("programs_pkey");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_programs_department_id")
                        .HasDatabaseName("ix_programs_department_id");

                    b.ToTable("programs", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.Scholarship", b =>
                {
                    b.Property<Guid>("ScholarshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("scholarship_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AcademicYear")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("academic_year");

                    b.Property<string>("AdditionalBenefits")
                        .HasColumnType("text")
                        .HasColumnName("additional_benefits");

                    b.Property<DateOnly?>("ApplicationDeadline")
                        .HasColumnType("date")
                        .HasColumnName("application_deadline");

                    b.Property<decimal?>("CoverageAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("coverage_amount");

                    b.Property<decimal?>("CoveragePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("coverage_percentage");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("IncomeCriteria")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("income_criteria");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<decimal?>("MinimumMerit")
                        .HasPrecision(8, 4)
                        .HasColumnType("numeric(8,4)")
                        .HasColumnName("minimum_merit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("RegionSpecific")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("region_specific");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ScholarshipId")
                        .HasName("scholarships_pkey");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_scholarships_university_id");

                    b.ToTable("scholarships", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.StudentProfile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Cnic")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cnic");

                    b.Property<int?>("CompletionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("completion_percentage");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("GuardianName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("guardian_name");

                    b.Property<int?>("GuardianRelation")
                        .HasColumnType("integer")
                        .HasColumnName("guardian_relation");

                    b.Property<bool?>("HostelPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("hostel_priority");

                    b.Property<decimal?>("HouseholdIncome")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("household_income");

                    b.Property<int?>("IdDocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("id_document_type");

                    b.Property<bool?>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_disabled");

                    b.Property<bool?>("IsHafizQuran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_hafiz_quran");

                    b.Property<string>("NicopNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nicop_number");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("passport_number");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PreferredAdmissionCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("preferred_admission_city");

                    b.Property<bool?>("ProfileCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("profile_completed");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_picture_url");

                    b.Property<bool?>("ScholarshipPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("scholarship_priority");

                    b.Property<string>("Sports")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sports");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId")
                        .HasName("student_profiles_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_student_profiles_user_id")
                        .HasDatabaseName("ix_student_profiles_user_id");

                    b.ToTable("student_profiles", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.TestScore", b =>
                {
                    b.Property<Guid>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("score_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ObtainedMarks")
                        .HasColumnType("integer")
                        .HasColumnName("obtained_marks");

                    b.Property<decimal?>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("percentage");

                    b.Property<string>("RollNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("roll_number");

                    b.Property<DateOnly?>("TestDate")
                        .HasColumnType("date")
                        .HasColumnName("test_date");

                    b.Property<string>("TestName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("test_name");

                    b.Property<int>("TestType")
                        .HasColumnType("integer")
                        .HasColumnName("test_type");

                    b.Property<int?>("TotalMarks")
                        .HasColumnType("integer")
                        .HasColumnName("total_marks");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("ScoreId")
                        .HasName("test_scores_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_test_scores_user_id")
                        .HasDatabaseName("ix_test_scores_user_id");

                    b.ToTable("test_scores", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.University", b =>
                {
                    b.Property<Guid>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("university_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Accreditation")
                        .HasColumnType("text")
                        .HasColumnName("accreditation");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country")
                        .HasDefaultValueSql("'Pakistan'::character varying");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("integer")
                        .HasColumnName("established_year");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("province");

                    b.Property<int?>("RankingInternational")
                        .HasColumnType("integer")
                        .HasColumnName("ranking_international");

                    b.Property<int?>("RankingNational")
                        .HasColumnType("integer")
                        .HasColumnName("ranking_national");

                    b.Property<string>("ShortName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("short_name");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("website_url");

                    b.HasKey("UniversityId")
                        .HasName("universities_pkey");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.UniversityRepresentative", b =>
                {
                    b.Property<Guid>("RepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("rep_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("department");

                    b.Property<string>("Designation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("designation");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsOfficial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_official");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("text")
                        .HasColumnName("office_address");

                    b.Property<string>("Permissions")
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<Guid?>("UniversityId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationDocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("verification_document_url");

                    b.HasKey("RepId")
                        .HasName("university_representatives_pkey");

                    b.HasIndex("UniversityId")
                        .HasDatabaseName("ix_university_representatives_university_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_university_representatives_user_id");

                    b.ToTable("university_representatives", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordResetExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("password_reset_expires");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_reset_token");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("verification_token");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "idx_users_email")
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email1");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("OneUniBackend.Models.AdmissionCycle", b =>
                {
                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("AdmissionCycles")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("admission_cycles_university_id_fkey");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OneUniBackend.Models.Application", b =>
                {
                    b.HasOne("OneUniBackend.Models.AdmissionCycle", "Cycle")
                        .WithMany("Applications")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applications_cycle_id_fkey");

                    b.HasOne("OneUniBackend.Models.Program", "Program")
                        .WithMany("Applications")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("applications_program_id_fkey");

                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("Applications")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("applications_university_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("applications_user_id_fkey");

                    b.Navigation("Cycle");

                    b.Navigation("Program");

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.AuditLog", b =>
                {
                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("audit_logs_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.Department", b =>
                {
                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("Departments")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("departments_university_id_fkey");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OneUniBackend.Models.Document", b =>
                {
                    b.HasOne("OneUniBackend.Models.Application", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("documents_application_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("DocumentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("documents_user_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "VerifiedByNavigation")
                        .WithMany("DocumentVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("documents_verified_by_fkey");

                    b.Navigation("Application");

                    b.Navigation("User");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("OneUniBackend.Models.EducationalRecord", b =>
                {
                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("EducationalRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("educational_records_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.Mentor", b =>
                {
                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("Mentors")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("mentors_university_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("Mentors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mentors_user_id_fkey");

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.MentorshipSession", b =>
                {
                    b.HasOne("OneUniBackend.Models.Mentor", "Mentor")
                        .WithMany("MentorshipSessions")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mentorship_sessions_mentor_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "Student")
                        .WithMany("MentorshipSessions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mentorship_sessions_student_id_fkey");

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OneUniBackend.Models.MeritFormula", b =>
                {
                    b.HasOne("OneUniBackend.Models.Program", "Program")
                        .WithMany("MeritFormulas")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("merit_formulas_program_id_fkey");

                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("MeritFormulas")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("merit_formulas_university_id_fkey");

                    b.Navigation("Program");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OneUniBackend.Models.Notification", b =>
                {
                    b.HasOne("OneUniBackend.Models.Application", "RelatedApplication")
                        .WithMany("Notifications")
                        .HasForeignKey("RelatedApplicationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("notifications_related_application_id_fkey");

                    b.HasOne("OneUniBackend.Models.MentorshipSession", "RelatedSession")
                        .WithMany("Notifications")
                        .HasForeignKey("RelatedSessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("notifications_related_session_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notifications_user_id_fkey");

                    b.Navigation("RelatedApplication");

                    b.Navigation("RelatedSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.Program", b =>
                {
                    b.HasOne("OneUniBackend.Models.Department", "Department")
                        .WithMany("Programs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("programs_department_id_fkey");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("OneUniBackend.Models.Scholarship", b =>
                {
                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("Scholarships")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("scholarships_university_id_fkey");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OneUniBackend.Models.StudentProfile", b =>
                {
                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("StudentProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("student_profiles_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.TestScore", b =>
                {
                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("TestScores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("test_scores_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.UniversityRepresentative", b =>
                {
                    b.HasOne("OneUniBackend.Models.University", "University")
                        .WithMany("UniversityRepresentatives")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("university_representatives_university_id_fkey");

                    b.HasOne("OneUniBackend.Models.User", "User")
                        .WithMany("UniversityRepresentatives")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("university_representatives_user_id_fkey");

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OneUniBackend.Models.AdmissionCycle", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("OneUniBackend.Models.Application", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("OneUniBackend.Models.Department", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("OneUniBackend.Models.Mentor", b =>
                {
                    b.Navigation("MentorshipSessions");
                });

            modelBuilder.Entity("OneUniBackend.Models.MentorshipSession", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("OneUniBackend.Models.Program", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("MeritFormulas");
                });

            modelBuilder.Entity("OneUniBackend.Models.University", b =>
                {
                    b.Navigation("AdmissionCycles");

                    b.Navigation("Applications");

                    b.Navigation("Departments");

                    b.Navigation("Mentors");

                    b.Navigation("MeritFormulas");

                    b.Navigation("Scholarships");

                    b.Navigation("UniversityRepresentatives");
                });

            modelBuilder.Entity("OneUniBackend.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("AuditLogs");

                    b.Navigation("DocumentUsers");

                    b.Navigation("DocumentVerifiedByNavigations");

                    b.Navigation("EducationalRecords");

                    b.Navigation("Mentors");

                    b.Navigation("MentorshipSessions");

                    b.Navigation("Notifications");

                    b.Navigation("StudentProfiles");

                    b.Navigation("TestScores");

                    b.Navigation("UniversityRepresentatives");
                });
#pragma warning restore 612, 618
        }
    }
}
